name: Publish to NPM

on:
  release:
    types: [published]
  push:
    tags:
      - "v*"

permissions:
  contents: write
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build library
        run: npm run build:lib

      - name: Determine version and tag
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            if [[ $VERSION == *"beta"* ]] || [[ $VERSION == *"alpha"* ]] || [[ $VERSION == *"rc"* ]]; then
              echo "NPM_TAG=beta" >> $GITHUB_OUTPUT
            else
              echo "NPM_TAG=latest" >> $GITHUB_OUTPUT
            fi
          else
            echo "NPM_TAG=latest" >> $GITHUB_OUTPUT
          fi

      - name: Update package version
        if: steps.version.outputs.VERSION
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          TARGET_VERSION="${{ steps.version.outputs.VERSION }}"
          if [ "$CURRENT_VERSION" != "$TARGET_VERSION" ]; then
            npm version $TARGET_VERSION --no-git-tag-version
          else
            echo "Version is already $TARGET_VERSION, skipping update"
          fi

      - name: Publish to NPM
        run: npm publish --tag ${{ steps.version.outputs.NPM_TAG || 'latest' }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          PRERELEASE=""
          if [[ "${{ github.ref_name }}" == *"beta"* ]] || [[ "${{ github.ref_name }}" == *"alpha"* ]] || [[ "${{ github.ref_name }}" == *"rc"* ]]; then
            PRERELEASE="--prerelease"
          fi
          
          gh release create "${{ github.ref_name }}" \
            --title "Release ${{ github.ref_name }}" \
            --notes "Changes in this Release
          - Auto-generated release from tag ${{ github.ref_name }}" \
            $PRERELEASE
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
